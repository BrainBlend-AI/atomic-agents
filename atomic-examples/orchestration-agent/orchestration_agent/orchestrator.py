from typing import Union
import openai
from pydantic import Field
from atomic_agents import AtomicAgent, AgentConfig, BaseIOSchema
from atomic_agents.context import SystemPromptGenerator, BaseDynamicContextProvider

from orchestration_agent.tools.searxng_search import (
    SearXNGSearchTool,
    SearXNGSearchToolConfig,
    SearXNGSearchToolInputSchema,
    SearXNGSearchToolOutputSchema,
)
from orchestration_agent.tools.calculator import (
    CalculatorTool,
    CalculatorToolConfig,
    CalculatorToolInputSchema,
    CalculatorToolOutputSchema,
)

import instructor
from datetime import datetime


########################
# INPUT/OUTPUT SCHEMAS #
########################
class OrchestratorInputSchema(BaseIOSchema):
    """Input schema for the Orchestrator Agent. Contains the user's message to be processed."""

    chat_message: str = Field(..., description="The user's input message to be analyzed and responded to.")


class OrchestratorOutputSchema(BaseIOSchema):
    """Combined output schema for the Orchestrator Agent. Contains the tool parameters."""

    tool_parameters: Union[SearXNGSearchToolInputSchema, CalculatorToolInputSchema] = Field(
        ..., description="The parameters for the selected tool"
    )


class FinalAnswerSchema(BaseIOSchema):
    """Schema for the final answer generated by the Orchestrator Agent."""

    final_answer: str = Field(..., description="The final answer generated based on the tool output and user query.")


#######################
# AGENT CONFIGURATION #
#######################
class OrchestratorAgentConfig(AgentConfig):
    """Configuration for the Orchestrator Agent."""

    searxng_config: SearXNGSearchToolConfig
    calculator_config: CalculatorToolConfig


#####################
# CONTEXT PROVIDERS #
#####################
class CurrentDateProvider(BaseDynamicContextProvider):
    def __init__(self, title):
        super().__init__(title)
        self.date = datetime.now().strftime("%Y-%m-%d")

    def get_info(self) -> str:
        return f"Current date in format YYYY-MM-DD: {self.date}"


######################
# ORCHESTRATOR AGENT #
######################
orchestrator_agent_config = AgentConfig(
    client=instructor.from_openai(openai.OpenAI()),
    model="gpt-5-mini",
    model_api_parameters={"reasoning_effort": "low"},
    system_prompt_generator=SystemPromptGenerator(
        background=[
            "You are an Orchestrator Agent that decides between using a search tool or a calculator tool based on user input.",
            "Use the search tool for queries requiring factual information, current events, or specific data.",
            "Use the calculator tool for mathematical calculations and expressions.",
        ],
        output_instructions=[
            "Analyze the input to determine whether it requires a web search or a calculation.",
            "For search queries, use the 'search' tool and provide 1-3 relevant search queries.",
            "For calculations, use the 'calculator' tool and provide the mathematical expression to evaluate.",
            "When uncertain, prefer using the search tool.",
            "Format the output using the appropriate schema.",
        ],
    ),
)
orchestrator_agent = AtomicAgent[OrchestratorInputSchema, OrchestratorOutputSchema](config=orchestrator_agent_config)
orchestrator_agent_final = AtomicAgent[OrchestratorInputSchema, FinalAnswerSchema](config=orchestrator_agent_config)

# Register the current date provider
orchestrator_agent.register_context_provider("current_date", CurrentDateProvider("Current Date"))
orchestrator_agent_final.register_context_provider("current_date", CurrentDateProvider("Current Date"))


def execute_tool(
    searxng_tool: SearXNGSearchTool, calculator_tool: CalculatorTool, orchestrator_output: OrchestratorOutputSchema
) -> Union[SearXNGSearchToolOutputSchema, CalculatorToolOutputSchema]:
    if isinstance(orchestrator_output.tool_parameters, SearXNGSearchToolInputSchema):
        return searxng_tool.run(orchestrator_output.tool_parameters)
    elif isinstance(orchestrator_output.tool_parameters, CalculatorToolInputSchema):
        return calculator_tool.run(orchestrator_output.tool_parameters)
    else:
        raise ValueError(f"Unknown tool parameters type: {type(orchestrator_output.tool_parameters)}")


#################
# EXAMPLE USAGE #
#################
if __name__ == "__main__":
    import os
    from dotenv import load_dotenv
    from rich.console import Console
    from rich.panel import Panel
    from rich.syntax import Syntax

    load_dotenv()

    # Set up the OpenAI client
    client = instructor.from_openai(openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY")))

    # Initialize the tools
    searxng_tool = SearXNGSearchTool(SearXNGSearchToolConfig(base_url="http://localhost:8080", max_results=5))
    calculator_tool = CalculatorTool(CalculatorToolConfig())

    # Initialize Rich console
    console = Console()

    # Print the full system prompt
    console.print(Panel(orchestrator_agent.system_prompt_generator.generate_prompt(), title="System Prompt", expand=False))
    console.print("\n")

    # Example inputs
    inputs = [
        "Who won the Nobel Prize in Physics in 2024?",
        "Please calculate the sine of pi/3 to the third power",
    ]

    for user_input in inputs:
        console.print(Panel(f"[bold cyan]User Input:[/bold cyan] {user_input}", expand=False))

        # Create the input schema
        input_schema = OrchestratorInputSchema(chat_message=user_input)

        # Print the input schema
        console.print("\n[bold yellow]Generated Input Schema:[/bold yellow]")
        input_syntax = Syntax(str(input_schema.model_dump_json(indent=2)), "json", theme="monokai", line_numbers=True)
        console.print(input_syntax)

        # Run the orchestrator to get the tool selection and input
        orchestrator_output = orchestrator_agent.run(input_schema)

        # Print the orchestrator output
        console.print("\n[bold magenta]Orchestrator Output:[/bold magenta]")
        orchestrator_syntax = Syntax(
            str(orchestrator_output.model_dump_json(indent=2)), "json", theme="monokai", line_numbers=True
        )
        console.print(orchestrator_syntax)

        # Run the selected tool
        response = execute_tool(searxng_tool, calculator_tool, orchestrator_output)

        # Print the tool output
        console.print("\n[bold green]Tool Output:[/bold green]")
        output_syntax = Syntax(str(response.model_dump_json(indent=2)), "json", theme="monokai", line_numbers=True)
        console.print(output_syntax)

        console.print("\n" + "-" * 80 + "\n")

        # Switch agent
        history = orchestrator_agent.history
        orchestrator_agent = orchestrator_agent_final
        orchestrator_agent.history = history
        orchestrator_agent.history.add_message("system", response)
        final_answer = orchestrator_agent.run(input_schema)
        console.print(f"\n[bold blue]Final Answer:[/bold blue] {final_answer.final_answer}")
        # Reset the agent to the original
        orchestrator_agent = AtomicAgent[OrchestratorInputSchema, OrchestratorOutputSchema](config=orchestrator_agent_config)
